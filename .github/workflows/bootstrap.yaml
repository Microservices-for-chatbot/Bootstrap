name: Deploy Cluster and Microservices

on:
  workflow_dispatch:

jobs:
  bootstrap-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve \
            -var="key_name=amithnv" \
            -var="private_key_content=${{ secrets.SSH_PRIVATE_KEY }}"
      
      - name: Get EC2 Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Deploy Microservices & Setup Runner
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GH_PAT: ${{ secrets.GH_PAT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # Write the SSH key to a temporary file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          
          # This is the full deployment script that runs on the EC2 instance
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ env.EC2_IP }} "
            # Install necessary packages
            sudo apt-get update
            sudo apt-get install -y jq curl git

            # Log in to Docker Hub on the EC2 machine
            docker login -u \"${{ env.DOCKERHUB_USERNAME }}\" -p \"${{ env.DOCKERHUB_PASSWORD }}\"

            # --- Now, perform the deployments ---
            REPOS=( "ai-service" "frontend" "chat-history-service" )
            DOCKER_ORG="amithpalissery"
            GITHUB_ORG="Microservices-for-chatbot"

            for repo in "${REPOS[@]}"; do
                echo "Deploying $repo..."
                
                # Clone the correct repository from GitHub based on the repo name
                # AI Service repo is named ai_service on GitHub
                if [ "$repo" == "ai-service" ]; then
                    git clone https://github.com/$GITHUB_ORG/ai_service.git
                    cd ai_service
                # Chat History Service repo is named chat_history on GitHub
                elif [ "$repo" == "chat-history-service" ]; then
                    git clone https://github.com/$GITHUB_ORG/chat_history.git
                    cd chat_history
                # All other repos use the same name
                else
                    git clone https://github.com/$GITHUB_ORG/$repo.git
                    cd $repo
                fi

                # Create or update secrets for AI service
                if [ "$repo" == "ai-service" ]; then
                    kubectl create secret generic ai-service-secrets --from-literal=GOOGLE_API_KEY=\"${{ env.GOOGLE_API_KEY }}\" --dry-run=client -o yaml | kubectl apply -f -
                fi
                
                # Get the latest image tag from your correct repository
                LATEST_TAG=\$(curl -s "https://hub.docker.com/v2/repositories/$DOCKER_ORG/$repo/tags/" | jq -r '.results[] | select(.name != "latest") | .name' | head -n 1)

                if [ -z "$LATEST_TAG" ]; then
                    echo "Error: No valid tag found for $repo. Please check your image build and push process."
                    exit 1
                fi
                
                echo "Deploying with Helm and image tag: $LATEST_TAG"

                # Perform the Helm deployment
                helm upgrade --install "$repo" ./Helm-chart --set image.tag="$LATEST_TAG"

                cd ..
            done

            # Set up the runner
            echo "Setting up the GitHub Actions runner..."
            mkdir -p /home/ubuntu/actions-runner
            cd /home/ubuntu/actions-runner
            curl -o actions-runner-linux-x64-2.316.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.316.0/actions-runner-linux-x64-2.316.0.tar.gz
            tar xzf ./actions-runner-linux-x64-2.316.0.tar.gz
            
            RUNNER_TOKEN=\$(curl -s -X POST -H "Authorization: token ${{ env.GH_PAT }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/orgs/Microservices-for-chatbot/actions/runners/registration-token | jq -r .token)
            
            ./config.sh --url https://github.com/Microservices-for-chatbot/Microservices-for-chatbot --token \"\$RUNNER_TOKEN\" --name \"\$(hostname)\" --unattended
            sudo ./svc.sh install
            sudo ./svc.sh start
          "
