name: Deploy Cluster and Microservices

on:
  workflow_dispatch:

jobs:
  bootstrap-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve \
            -var="key_name=amithnv" \
            -var="private_key_content=${{ secrets.SSH_PRIVATE_KEY }}"
      
      - name: Get EC2 Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Deploy Microservices & Setup Runner
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GH_PAT: ${{ secrets.GH_PAT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          EC2_IP: ${{ env.EC2_IP }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key
          chmod 600 private_key

          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${EC2_IP} bash -s <<'EOF'
            set -e

            # Your existing deployment commands with fixes

            # --- AI Service ---
            git clone https://github.com/Microservices-for-chatbot/ai_service.git
            cd ai_service
            kubectl create secret generic ai-service-secrets --from-literal=GOOGLE_API_KEY="${GOOGLE_API_KEY}" --dry-run=client -o yaml | kubectl apply -f -
            LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/amithpalissery/ai-service/tags" | jq -r '.results[] | select(.name != "latest") | .name' | head -n1)
            helm upgrade --install ai-service Helm-chart --set image.tag="$LATEST_TAG"
            cd ..

            # --- Chat History Service ---
            git clone https://github.com/Microservices-for-chatbot/chat_history.git
            cd chat_history
            LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/amithpalissery/chat-history-service/tags" | jq -r '.results[] | select(.name != "latest") | .name' | head -n1)
            helm upgrade --install chat-history-service ./Helm-chart --set image.tag="$LATEST_TAG"
            cd ..

            # --- Frontend ---
            git clone https://github.com/Microservices-for-chatbot/frontend.git
            cd frontend
            LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/amithpalissery/frontend/tags" | jq -r '.results[] | select(.name != "latest") | .name' | head -n1)
            helm upgrade --install frontend-release ./Helm-chart --set image.tag="$LATEST_TAG"
            cd ..

            # --- GitHub Actions Runner Setup ---

            RUNNER_DIR="/home/ubuntu/actions-runner"
            mkdir -p "$RUNNER_DIR"
            cd "$RUNNER_DIR"

            curl -o actions-runner-linux-x64.tar.gz -L https://github.com/actions/runner/releases/download/v2.316.0/actions-runner-linux-x64-2.316.0.tar.gz
            tar xzf actions-runner-linux-x64.tar.gz

            # Get the runner registration token from GitHub API
            RUNNER_TOKEN=$(curl -s -X POST -H "Authorization: token ${GH_PAT}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/orgs/Microservices-for-chatbot/actions/runners/registration-token | jq -r .token)

            ./config.sh --url https://github.com/Microservices-for-chatbot/Microservices-for-chatbot --token "$RUNNER_TOKEN" --name "$(hostname)" --unattended

            sudo ./svc.sh install
            sudo ./svc.sh start
          EOF
